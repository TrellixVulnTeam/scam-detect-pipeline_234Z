AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"

Description: "Create an Amazon Sagemaker Autopilot Pipeline with AWS Step Functions"

Parameters:

  S3BucketName:
    Type: String
    Description: The S3 bucket where you will your data assets. Select a unique name.
    Default: "your-unique-bucket-name"

  StateMachineName:
    Type: String
    Description: The name you want to assign to the Step Funcions State Machine. Select a unique name.
    Default: "your-unique-statemachine-name"

Resources:

  ## Amazon Simple Storage Service (S3) Bucket

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName

  ## Amazon Sagemaker Role
  AmazonSagemakerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [ {
          "Effect": "Allow",
          "Principal": {
            "Service": [ "sagemaker.amazonaws.com" ]
          },
          "Action": [ "sts:AssumeRole" ]
        } ]
      }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: !Sub "${S3Bucket}-sagemaker-role"

  ## AWS Lambda Functions

  # 0 - Create data folder Function
  # This folder is where you upload your data, which will initiate the pipeline process.

  CustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [ {
          "Effect": "Allow",
          "Principal": {
            "Service": [ "lambda.amazonaws.com" ]
          },
          "Action": [ "sts:AssumeRole" ]
        } ]
      }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: !Sub "${S3Bucket}-custom-role"

  LambdaHelperFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'SMP-${S3Bucket}-Helper'
      Code:
        ZipFile: |
          import boto3, json, os
          import cfnresponse
          client = boto3.client('s3')
          def handler(event, context):
              bucket_name = os.environ['inputbucket']
              client.put_object(Bucket=bucket_name, Key="data/")
              responseData = {}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CustomResourceLambdaRole
          - Arn
      Runtime: python2.7
      Timeout: 60
      Environment:
        Variables:
          inputbucket: !Ref S3BucketName

  LambdaFirstInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaHelperFunction.Arn

  #1 - Trigger on S3 Object Creation

  TriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [ {
          "Effect": "Allow",
          "Principal": {
            "Service": [ "lambda.amazonaws.com" ]
          },
          "Action": [ "sts:AssumeRole" ]
        } ]
      }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

      #RoleName: !Sub "SMP-Lambda-Trigger-role"
      RoleName: !Join
              - ''
              - - 'SMP-'
                - !Ref S3BucketName
                - '-Trigger-role'
  TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      #FunctionName: "SMP-Trigger-Function"
      FunctionName: !Join
        - ''
        - - 'SMP-'
          - !Ref S3BucketName
          - '-Trigger-Function'
      CodeUri: "s3://ml-demos-stepsmp/smp-trigger-function.zip"
      Handler: "index.lambda_handler"
      Runtime: "python3.9"
      Timeout: 60
      Role:
        Fn::GetAtt:
          - TriggerRole
          - Arn
      Environment:
        Variables:
          StateMachineName: !Ref StateMachineName
          AccountId: !Ref AWS::AccountId
      Events:
        NewDataEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3Bucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: "data/"      # The value to search for in the S3 object key names
                  - Name: suffix
                    Value: ".csv"      # The value to search for in the S3 object key names
  #2 - Job Creation Function

  CreateJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [ {
          "Effect": "Allow",
          "Principal": {
            "Service": [ "lambda.amazonaws.com" ]
          },
          "Action": [ "sts:AssumeRole" ]
        } ]
      }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess

      RoleName: !Sub "SMP-${S3Bucket}-Create-Job-Role"

  CreateJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "SMP-${S3Bucket}-Create-Job"
      CodeUri: "s3://ml-demos-stepsmp/smp-create-job-function.zip"
      Handler: "index.lambda_handler"
      Runtime: "python3.9"
      Timeout: 60
      Role:
        Fn::GetAtt:
          - CreateJobRole
          - Arn
      Environment:
        Variables:
          SageMakerRoleName: !Ref AmazonSagemakerRole

  #3 - Job Progress Function

  JobProgressRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [ {
          "Effect": "Allow",
          "Principal": {
            "Service": [ "lambda.amazonaws.com" ]
          },
          "Action": [ "sts:AssumeRole" ]
        } ]
      }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

      RoleName: !Sub "SMP-${S3Bucket}-Job-Progress-Role"

  JobProgressFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "SMP-${S3Bucket}-Job-Progress"
      CodeUri: "s3://ml-demos-stepsmp/smp-job-progress-function.zip"
      Handler: "index.lambda_handler"
      Runtime: "python3.9"
      Timeout: 60
      Role:
        Fn::GetAtt:
          - JobProgressRole
          - Arn

  #4 - Candidate Evaluation Function

  EvaluateCandidatesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [ {
          "Effect": "Allow",
          "Principal": {
            "Service": [ "lambda.amazonaws.com" ]
          },
          "Action": [ "sts:AssumeRole" ]
        } ]
      }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

      RoleName: !Sub "SMP-${S3Bucket}-Evaluate-Candidates-Role"

  EvaluateCandidatesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "SMP-${S3Bucket}-Evaluate-Candidates"
      CodeUri: "s3://ml-demos-stepsmp/smp-evaluate-candidates-function.zip"
      Handler: "index.lambda_handler"
      Runtime: "python3.9"
      Timeout: 60
      Role:
        Fn::GetAtt:
          - EvaluateCandidatesRole
          - Arn

  #5 - Endpoint Creation Function

  CreateEndpointRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [ {
          "Effect": "Allow",
          "Principal": {
            "Service": [ "lambda.amazonaws.com" ]
          },
          "Action": [ "sts:AssumeRole" ]
        } ]
      }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess


      RoleName: !Sub "SMP-${S3Bucket}-Create-Endpoint-Role"

  CreateEndpointFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "SMP-${S3Bucket}-Create-Endpoint"
      CodeUri: "s3://ml-demos-stepsmp/smp-create-endpoint-function.zip"
      Handler: "index.lambda_handler"
      Runtime: "python3.9"
      Timeout: 60
      Role:
        Fn::GetAtt:
          - CreateEndpointRole
          - Arn
      Environment:
        Variables:
          SageMakerRoleName: !Ref AmazonSagemakerRole

  #6 - Endpoint Progress Function
  EndpointProgressRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [ {
          "Effect": "Allow",
          "Principal": {
            "Service": [ "lambda.amazonaws.com" ]
          },
          "Action": [ "sts:AssumeRole" ]
        } ]
      }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

      RoleName: !Sub "SMP-${S3Bucket}-Endpoint-Progress-Role"

  EndpointProgressFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "SMP-${S3Bucket}-Endpoint-Progress"
      CodeUri: "s3://ml-demos-stepsmp/smp-endpoint-progress-function.zip"
      Handler: "index.lambda_handler"
      Runtime: "python3.9"
      Timeout: 60
      Role:
        Fn::GetAtt:
          - EndpointProgressRole
          - Arn

  #AWS Step Functions

  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      RoleName: !Sub "SMP-${S3Bucket}-StateMachineRole"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Ref StateMachineName
      DefinitionString:
        !Sub
        - |-
          {
            "Comment": "Create AutoML Job",
            "StartAt": "Create AutoML Job",
            "States": {
              "Create AutoML Job": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "FunctionName": "${createJobFunctionArn}",
                  "Payload": {
                    "bucket_name.$": "$.bucket_name",
                    "file_key.$": "$.file_key"
                  }
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Comment": " ",
                "Next": "Check Job Progress"
              },
              "Check Job Progress": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "FunctionName": "${jobProgressFunctionArn}",
                  "Payload.$": "$"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "Is Job Created?"
              },
              "Is Job Created?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.state",
                    "StringEquals": "complete",
                    "Next": "Evaluate Candidates"
                  },
                  {
                    "Variable": "$.state",
                    "StringEquals": "failed",
                    "Next": "Failed AutoML Job"
                  }
                ],
                "Default": "Wait Job Completion"
              },
              "Evaluate Candidates": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "${evaluateCandidatesFunctionArn}"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "Create Endpoint"
              },
              "Create Endpoint": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "${createEndpointFunctionArn}"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "Check Endpoint"
              },
              "Check Endpoint": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "${endpointProgressFunctionArn}"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "Is Endpoint Created?"
              },
              "Is Endpoint Created?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.state",
                    "StringEquals": "failed",
                    "Next": "Failed Endpoint Creation"
                  },
                  {
                    "Variable": "$.state",
                    "StringEquals": "complete",
                    "Next": "Endpoint Created"
                  }
                ],
                "Default": "Wait Endpoint Creation"
              },
              "Wait Endpoint Creation": {
                "Type": "Wait",
                "Seconds": 60,
                "Next": "Check Endpoint"
              },
              "Failed Endpoint Creation": {
                "Type": "Fail"
              },
              "Wait Job Completion": {
                "Type": "Wait",
                "Seconds": 360,
                "Next": "Check Job Progress"
              },
              "Failed AutoML Job": {
                "Type": "Fail"
              },
              "Endpoint Created": {
                "Type": "Succeed"
              }
            }
          }
        - {
          createJobFunctionArn: !GetAtt [ CreateJobFunction, Arn ],
          jobProgressFunctionArn: !GetAtt [ JobProgressFunction, Arn ],
          evaluateCandidatesFunctionArn: !GetAtt [ EvaluateCandidatesFunction, Arn ],
          createEndpointFunctionArn: !GetAtt [ CreateEndpointFunction, Arn ],
          endpointProgressFunctionArn: !GetAtt [ EndpointProgressFunction, Arn ]
        }
      RoleArn:
        Fn::GetAtt:
          - StateMachineRole
          - Arn
Outputs:
  InputBucket:
    Description: Store your data files in the "data" folder inside this bucket.
    Value: !Ref S3Bucket